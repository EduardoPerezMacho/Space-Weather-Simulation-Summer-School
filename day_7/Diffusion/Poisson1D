#!/usr/bin/env python
"""
Solution of a 1D Poisson equation: -u_xx = f
Domain: [0,1]
BC: u(0) = u(1) = 0
with f = (3*x + x^2)*exp(x)

Analytical solution: -x*(x-1)*exp(x)

Finite differences (FD) discretization: second-order diffusion operator
"""
__author__ = 'Jordi Vila-PÃ©rez'
__email__ = 'jvilap@mit.edu'


import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation    #We have to load this
from math import pi
#%matplotlib qt
plt.close()

"Number of points"
N = 8
Dx = 1/N
x = np.linspace(0,1,N+1)

"System matrix and RHS term"
A = (1/Dx**2)*(2*np.diag(np.ones(N-1)) - np.diag(np.ones(N-2),-1) - np.diag(np.ones(N-2),1))
F = (3*x[1:N] + x[1:N]**2)*np.exp(x[1:N])

"Solution of the linear system AU=F"
U = np.linalg.solve(A,F)
u = np.concatenate(([0],U,[0]))
ua = -x*(x-1)*np.exp(x)
"""
"Plotting solution"
plt.plot(x,ua,'-r',linewidth=2,label='$u_a$')
plt.plot(x,u,':ob',linewidth=2,label='$\widehat{u}$')
plt.legend(fontsize=12,loc='upper left')
plt.grid()
plt.axis([0, 1,0, 0.5])
plt.xlabel("x",fontsize=16)
plt.ylabel("u",fontsize=16)

"Compute error"
error = np.max(np.abs(u-ua))
print("Linf error u: %g\n" % error)
"""

# Boundary condition
print(A)
print()
A = (1/Dx**2)*(2*np.diag(np.ones(N+1)) - np.diag(np.ones(N),-1) - np.diag(np.ones(N),1))
#F = (3*x + x**2)*np.exp(x)
F = 2*(2*x**2+5*x-2)*np.exp(x)
print(A)
print()
A[0,:] = np.concatenate(([1], np.zeros(N)))
F[0] = 0
print(A)
print()
#A[N,:] = np.concatenate((np.zeros(N), [1]))
A[N,:] = np.concatenate((np.zeros(N-1), [-1/Dx], [1/Dx]))
F[N] = 0
print(A)
print()

"Solution of the linear system AU=F"
U = np.linalg.solve(A,F)
u = U
#ua = -x*(x-1)*np.exp(x)
ua = 2*x*(3-2*x)*np.exp(x)

"Plotting solution"
plt.plot(x,ua,'-r',linewidth=2,label='$u_a$')
plt.plot(x,u,':ob',linewidth=2,label='$\widehat{u}$')
plt.legend(fontsize=12,loc='upper left')
plt.grid()
plt.axis([0, 2,0, 6])
plt.xlabel("x",fontsize=16)
plt.ylabel("u",fontsize=16)

"Compute error"
error = np.max(np.abs(u-ua))
print("Linf error u: %g\n" % error)

#%%
#SECOND ORDER:
# Boundary condition
A = (1/Dx**2)*(2*np.diag(np.ones(N+1)) - np.diag(np.ones(N),-1) - np.diag(np.ones(N),1))
#F = (3*x + x**2)*np.exp(x)
F = 2*(2*x**2+5*x-2)*np.exp(x)
#F = (3*x + x**2)*np.exp(x)
F = 2*(2*x**2+5*x-2)*np.exp(x)
print(A)
print()
A[0,:] = np.concatenate(([1], np.zeros(N)))
F[0] = 0
print(A)
print()
#A[N,:] = np.concatenate((np.zeros(N), [1]))
A[N,:] = np.concatenate((np.zeros(N-2), [1/2/Dx],[-2/Dx], [3/2/Dx]))
F[N] = 0
print(A)
print()

"Solution of the linear system AU=F"
U = np.linalg.solve(A,F)
u = U
#ua = -x*(x-1)*np.exp(x)
ua = 2*x*(3-2*x)*np.exp(x)

"Plotting solution"
plt.plot(x,ua,'-r',linewidth=2,label='$u_a$')
plt.plot(x,u,':ob',linewidth=2,label='$\widehat{u}$')
plt.legend(fontsize=12,loc='upper left')
plt.grid()
plt.axis([0, 2,0, 6])
plt.xlabel("x",fontsize=16)
plt.ylabel("u",fontsize=16)

"Compute error"
error = np.max(np.abs(u-ua))
print("Linf error u: %g\n" % error)

#%%
#GHOST STATE:
"Number of points"
N = 8
Dx = 1/N
x = np.linspace(0,1+Dx,N+2)

# Boundary condition
A = (1/Dx**2)*(2*np.diag(np.ones(N+2)) - np.diag(np.ones(N+1),-1) - np.diag(np.ones(N+1),1))
#F = (3*x + x**2)*np.exp(x)
F = 2*(2*x**2+5*x-2)*np.exp(x)

A[0,:] = np.concatenate(([1], np.zeros(N+1)))
F[0] = 0
print(A)
print()
#A[N,:] = np.concatenate((np.zeros(N), [1]))
A[N+1,:] = np.concatenate((np.zeros(N-1), [-1/2/Dx],[0], [1/2/Dx]))
F[N+1] = 0
print(A)
print()

"Solution of the linear system AU=F"

U = np.linalg.solve(A,F)
u = U
#ua = -x*(x-1)*np.exp(x)
ua = 2*x*(3-2*x)*np.exp(x)
x = np.delete(x, -1)
u = np.delete(u, -1)
ua = np.delete(ua, -1)

"Plotting solution"
plt.plot(x,ua,'-r',linewidth=2,label='$u_a$')
plt.plot(x,u,':ob',linewidth=2,label='$\widehat{u}$')
plt.legend(fontsize=12,loc='upper left')
plt.grid()
plt.axis([0, 2,0, 6])
plt.xlabel("x",fontsize=16)
plt.ylabel("u",fontsize=16)

"Compute error"
error = np.max(np.abs(u-ua))
print("Linf error u: %g\n" % error)


#%%
#HEAT EQUATION:
"Number of points"
N = 8
Dx = 1/N
x = np.linspace(0,1+Dx,N+2)

"Time parameters"
dt = 1/24
time = np.arange(0,3+dt,dt)
nt = len(time)

xN = np.concatenate((x, [x[N]+Dx]))
U = np.zeros((N+2, nt))
# Boundary condition

for it in range(0, nt-1):
    A = (1/Dx**2)*(2*np.diag(np.ones(N+2)) - np.diag(np.ones(N+1),-1) - np.diag(np.ones(N+1),1))
    F = 2*(2*xN**2+5*xN-2)*np.exp(xN)

    "Temporal term"
    A += (1/dt)*np.diag(np.ones(N+1)
    F += U[:,it]/dt
    
    A[0,:] = np.concatenate(([1], np.zeros(N+1)))
    F[0] = 0

    A[N+1,:] = np.concatenate((np.zeros(N-1), [-1/2/Dx],[0], [1/2/Dx]))
    F[N+1] = 0


    "Solution of the linear system AU=F"
    u = np.linalg.solve(A,F)
    U[:,it+1] = u
    
    #ua = -x*(x-1)*np.exp(x)
    ua = 2*x*(3-2*x)*np.exp(x)
    x = np.delete(x, -1)
    u = np.delete(u, -1)
    ua = np.delete(ua, -1)

    "Plotting solution"
    plt.plot(x,ua,'-r',linewidth=2,label='$u_a$')
    plt.plot(x,u,':ob',linewidth=2,label='$\widehat{u}$')
    plt.legend(fontsize=12,loc='upper left')
    plt.grid()
    plt.axis([0, 2,0, 6])
    plt.xlabel("x",fontsize=16)
    plt.ylabel("u",fontsize=16)

"Compute error"
error = np.max(np.abs(u-ua))
print("Linf error u: %g\n" % error)




